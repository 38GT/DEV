{ 기술을 혁신하는 법 }

1. 반드시 필요한 기능을 정하기
2. 해당 기능을 구현해야할 때, 어떤 constraint가 최우선인지 정하기
3. 가능한 최적의 방법들을 시도해본다. (극단적인 효율을 내는 경로가 존재하는 지 탐색)

{ 코드 작성 원칙 }

0. 문제 정의하기, 요구사항 분석하기
1. 데이터처리 흐름 기준으로 몇 가지 함수로 전체 로직 나누기
2. function 키워드 호이스팅을 이용한 두괄식 코드
3. 적절한 디자인 패턴 활용하기
4. 함수이름 지을 때, 대상을 포함하지 말고 동사위주의 작명을 하고 대상은 파라미터에 넣기
5. 함수 내부 변수 작명할 때에는 이름이 데이터에 가까운 설명이 되어야 하고 함수 외부로 나갈 수록 추상화된 이름들을 사용하자.
6. nested object에서 작명할 때에는 가장 상위에 있는 식별자에는 주제를 직접적으로 할당하고 하위에 있는 식별자에는 해당 주제아래에서 한 번에 이해할 수 있는 추상화된 상태나 표현만 할당하자.
7. 파일 나누는 기준은 코드를 개선하고 업데이트 해 나가는 과정에서 비용을 줄이기 위함이다. 

{ 코드 분석 원칙 }

1. 사용된 문법 분석
2. 사용된 로직 분석
3. 사용된 디자인 패턴 분석


{ 학습 원칙 }

1. 기억을 효율적으로 하고 싶으면 심리적인 동기, "왜?" 를 중심으로 이야기를 풀어나가면 된다.
2. 따라서 알고 있는 내용을 (1)정리한 후에 (2)질문을 하고 (3)대답하는 과정으로 학습하자.


{ 데이터 저장 }

1. 저장가능한 공간

  (1) 각 종 변수
   "const"
    저장하더라도 배열이나 객체는 변경가능하므로 비추천 
    암묵적 결합을 허용 -> 변수의 유효범위가 커지면 예측하기 어려운 상황이 벌어진다.
  (2) DB
  (3) 버퍼
  (4) 세션, 쿠키
  (5) 캐시
  (6) 파일 시스템
  (7) 환경 변수

{ constraints }

1. 변수의 scope
2. Array, Map, Set, Object의 적절한 사용과 작업별 시간 복잡도
3. 적절한 저장 공간 사용
4. 
